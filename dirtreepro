#!/usr/bin/env python

import os
import sys


def should_ignore(path, root_dir, matcher=None):
    # Always ignore .git directory
    relative_path = os.path.relpath(path, root_dir)
    if relative_path.startswith('.git'):
        return True
    # Check gitignore patterns if matcher exists
    if matcher and matcher(relative_path):
        return True
    return False


def generate_tree(root_dir, directory, prefix='', is_root=True, matcher=None):
    if is_root:
        base_name = os.path.basename(os.path.abspath(directory))
        print(f"{base_name}/")
        is_root = False
    entries = os.listdir(directory)
    filtered_entries = []

    for entry in entries:
        entry_path = os.path.join(directory, entry)
        if should_ignore(entry_path, root_dir, matcher):
            continue
        filtered_entries.append(entry)

    for index, entry in enumerate(filtered_entries):
        entry_path = os.path.join(directory, entry)
        is_last = index == len(filtered_entries) - 1
        connector = '└── ' if is_last else '├── '
        next_prefix = '    ' if is_last else '│   '
        print(f"{prefix}{connector}{entry}")
        if os.path.isdir(entry_path):
            generate_tree(root_dir, entry_path, prefix +
                          next_prefix, is_root=False, matcher=matcher)


def print_file_contents(root_dir, file_paths):
    for file_path in file_paths:
        full_path = os.path.join(root_dir, file_path)
        if os.path.isfile(full_path):
            print(f"\n{file_path}:")
            print("```")
            with open(full_path, 'r') as f:
                print(f.read())
            print("```")
        else:
            print(f"\nWarning: {file_path} does not exist or is not a file.")


def main():
    root_dir = '.'  # Default to current directory
    selected_files = []

    if len(sys.argv) >= 2:
        if os.path.isdir(sys.argv[1]):
            root_dir = sys.argv[1]
            selected_files = sys.argv[2:]
        else:
            selected_files = sys.argv[1:]

    if not os.path.isdir(root_dir):
        print(f"Error: {root_dir} is not a valid directory.")
        sys.exit(1)

    matcher = None
    gitignore_path = os.path.join(root_dir, '.gitignore')
    if os.path.isfile(gitignore_path):
        try:
            from gitignore_parser import parse_gitignore
        except ImportError:
            print(
                "Error: The 'gitignore-parser' package is required. Install with 'pip install gitignore-parser'")
            sys.exit(1)
        matcher = parse_gitignore(gitignore_path)

    generate_tree(root_dir, root_dir, matcher=matcher)

    if selected_files:
        print_file_contents(root_dir, selected_files)


if __name__ == "__main__":
    main()
